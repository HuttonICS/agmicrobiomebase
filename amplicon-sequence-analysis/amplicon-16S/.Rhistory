text = element_text(size = 18, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 45,
hjust = 1, size = 13, face = "bold"),
axis.text.y = element_text(angle = 0, hjust = 0,
colour = "black", size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 15, face = "bold"),
legend.position = "none"                 # Hide legend
)
# Clean up by removing the alpha.object
# This step removes the alpha.object to free up memory
rm(alpha.object)
# Load the necessary libraries
library("dplyr")
library("reshape2")
# Merge the replicate samples for each Group
physeq <- merge_samples(physeq.a, "Group", fun = sum)
# Initialize an empty list to store genus-level abundance data for each taxonomic level
gentab_levels <- list()
# Set observation threshold
observationThreshold <- 1
# Define the taxonomic levels
genus_levels <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
# Loop through all the taxonomic levels
for (level in genus_levels) {
# Create a factor variable for each level
genfac <- factor(tax_table(physeq)[, level])
# Calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# Calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# Create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$Group <- row.names(BB)
# Add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% reduce(full_join, by = "Group")
# Set row names and column names
row.names(B2) <- B2$Group
B2$Group <- NULL
colnames(B2)[1:6] <- genus_levels
# Print the resulting data frame
print(B2)
# Convert the data frame to long format for plotting
B2$Group = row.names(B2)
data_long <- reshape2::melt(B2, id.vars = "Group",
variable.name = "Level",
value.name = "Taxa")
# Plot the data as a line graph using ggplot
ggplot(data_long, aes(x = Level, y = Taxa,
color = Group, group = Group)) +
geom_line() +
geom_point(size = 4) +
labs(x = "Taxonomic Level", y = "Count", color = "Group") +
theme_classic() +   scale_color_brewer(palette = "Paired") +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.5),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5,
size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5,
size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold"),
legend.title = element_text(size = 13.5, face = "bold"),
legend.text = element_text(size = 12),
legend.key.size=unit(0.4,"cm")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,400,by=100))
# Clean up by removing unnecessary objects
rm(physeq, gentab_levels, observationThreshold, B2, data_long, genfac, genus_levels, level, level_counts)
# Load the necessary libraries
library("UpSetR")
library("reshape2")
library("plyr")
library("dplyr")
library("microbiome")
# Aggregate taxa at the genus level
# This step aggregates the taxa in the phyloseq object at the genus level
B <- aggregate_taxa(physeq.a.group, "Genus", verbose = TRUE)
# Remove undesired genera
# This step removes genera that are not of interest from the phyloseq object
taxa_to_remove <- c("uncultured", "Unknown")
B2 <- subset_taxa(B, !get("Genus") %in% taxa_to_remove)
# Extract relevant data from the phyloseq object
sample_data <- sample_data(B2)
otu_table <- otu_table(B2)
abundance <- as.vector(otu_table)
# Create a tibble with the extracted data
D <- tibble(
Sample = rep(sample_data$Group, each = nrow(otu_table)),
ASV = rep(rownames(otu_table), times = ncol(otu_table)),
Abundance = abundance
) %>%
group_by(Sample) %>%
mutate(rank = rank(desc(Abundance))) %>%
filter(Abundance > 0) %>%
ungroup() %>%
select(Sample, Abundance, ASV)
# Remove the Abundance column
D$Abundance <- NULL
# Rename the second column to "ASV"
names(D)[2] <- "ASV"
names(D)[1] <- "Group"
# Convert data from long to wide format
E <- dcast(D, ASV ~ Group)
# Define a binary function
binary_fun <- function(x) {
x[is.na(x)] <- 0
ifelse(x > 0, 1, 0)
}
col = brewer.pal(n = 9, name = "Paired")
# Apply the binary function to columns 2 to 10
temp_df <- apply(E[2:10], 2, binary_fun)
temp_df <- as.data.frame(temp_df)
# Create an UpSet plot
upset_plot <- upset(temp_df,
sets = colnames(temp_df),
sets.bar.color = (col),
order.by = "freq",
empty.intersections = "on",
mainbar.y.label = "Counts by Pattern of Conditions",
sets.x.label = "Counts by Condition",
matrix.color="blue",
mb.ratio = c(0.6, 0.4),
point.size= 2.75,
line.size = 1.25,
text.scale = 1.5
)
# Print the UpSet plot
print(upset_plot)
# Load the necessary libraries
library("phyloseq")   # For handling phylogenetic sequencing data
library("ggtree")     # For tree visualisation
library("scales")     # For scaling transformations
# Load the GlobalPatterns dataset and prune taxa
# This step removes taxa with zero sums and subsets data based on Phylum value
GP <- prune_taxa(taxa_sums(physeq.a) > 0, physeq.a)
GP.chl <- subset_taxa(GP, Genus == "Fusarium")
# Create a ggtree plot
# This step creates a phylogenetic tree plot with points colored and shaped by the "Group" variable
p <- ggtree(GP.chl, ladderize = TRUE) +
geom_tiplab(aes(label = Species), as_ylab=TRUE) +
geom_point(aes(x = x + hjust, color = Group,
shape = Group, size = Abundance), na.rm = TRUE) +
scale_size_continuous(trans = log_trans(2)) +
scale_shape_manual(values = c(15, 17, 3, 4, 16, 18, 21, 22, 23)) + # Set custom shapes
scale_color_brewer(palette = "Paired") +
theme(text = element_text(size=13, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.25),
axis.line = element_line(colour = 'black', size = 1.25) ,
axis.title.y = element_text(color="black", size=2.5,face="bold"),
legend.text = element_text(size = 8),
legend.key.size=unit(0.4,"cm"),
legend.title = element_text(size = 10, face = "bold"),
legend.position = "bottom"
)
# Load the necessary libraries
library("phyloseq")   # For handling phylogenetic sequencing data
library("ggtree")     # For tree visualisation
library("scales")     # For scaling transformations
# Load the GlobalPatterns dataset and prune taxa
# This step removes taxa with zero sums and subsets data based on Phylum value
GP <- prune_taxa(taxa_sums(physeq.a) > 0, physeq.a)
GP.chl <- subset_taxa(GP, Genus == "Fusarium")
# Create a ggtree plot
# This step creates a phylogenetic tree plot with points colored and shaped by the "Group" variable
p <- ggtree(GP.chl, ladderize = TRUE) +
geom_tiplab(aes(label = Species), as_ylab=TRUE) +
geom_point(aes(x = x + hjust, color = Group,
shape = Group, size = Abundance), na.rm = TRUE) +
scale_size_continuous(trans = log_trans(2)) +
scale_shape_manual(values = c(15, 17, 3, 4, 16, 18, 21, 22, 23)) + # Set custom shapes
scale_color_brewer(palette = "Paired") +
theme(text = element_text(size=13, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.25),
axis.line = element_line(colour = 'black', size = 1.25) ,
axis.title.y = element_text(color="black", size=2.5,face="bold"),
legend.text = element_text(size = 8),
legend.key.size=unit(0.4,"cm"),
legend.title = element_text(size = 10, face = "bold"),
legend.position = "bottom"
)
# Print the ggtree plot
print(p)
# Subset the taxa to Genus from physeq.wheat
# This step subsets the data to include only the genus "Fusarium" and its species
physeq.a.genus <- subset_taxa(physeq.a, Genus == "Fusarium")
physeq.a.equiseti <- subset_taxa(physeq.a, Species == "Fusarium_equiseti")
physeq.a.nurragi <- subset_taxa(physeq.a, Species == "Fusarium_nurragi")
physeq.a.waltergamsii <- subset_taxa(physeq.a, Species == "Fusarium_waltergamsii")
# Calculate the total abundance of Fusarium for each sample
# This step calculates the total abundance of each Fusarium species in each sample
meta = physeq.a@sam_data
otudf = as.data.frame(t(as.data.frame(physeq.a.genus@otu_table)))
meta$Fusarium = rowSums(otudf)
otudf = as.data.frame(t(as.data.frame(physeq.a.equiseti@otu_table)))
meta$F.equiseti = rowSums(otudf)
otudf = as.data.frame(t(as.data.frame(physeq.a.nurragi@otu_table)))
meta$F.nurragi = rowSums(otudf)
otudf = as.data.frame(t(as.data.frame(physeq.a.waltergamsii@otu_table)))
meta$F.waltergamsii = rowSums(otudf)
# Plot a graph of the abundance of Fusarium for each sample grouped by Group:
# This step creates a scatter plot of the abundance of Fusarium and its species for each sample, grouped by the "Group" variable
p1 <- ggplot(subset(meta, Group %in% c("CL.BO","CL.YO",
"CY.BU","CY.YO",
"SC.HE","SC.SH",
"SL.AN","SL.BE",
"SL.SH")),
aes(x = Group, y = Fusarium,  colour = interaction(Group))) +
geom_point(alpha = 1, position = "jitter", size = 4) +
geom_boxplot(alpha = 0, colour = "black", size = 0.8)+
theme_classic() +   scale_color_brewer(palette = "Paired") +
labs(x = "", y = "\n Fusarium") +
theme(text = element_text(size=15, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.25),
axis.line = element_line(colour = 'black', size = 1.25),
axis.text.x = element_text(angle=45, hjust=1,
colour = "black", size = 13),
axis.text.y = element_text(angle=0, hjust=0.5,
colour = "black",size = 13),
axis.title.y = element_text(color="black", size=12,face="bold"),
legend.position = "none")
p2 <- ggplot(subset(meta, Group %in% c("CL.BO","CL.YO",
"CY.BU","CY.YO",
"SC.HE","SC.SH",
"SL.AN","SL.BE",
"SL.SH")),
aes(x = Group, y = F.equiseti,  colour = interaction(Group))) +
geom_point(alpha = 1, position = "jitter", size = 4) +
geom_boxplot(alpha = 0, colour = "black", size = 0.8)+
theme_classic() +   scale_color_brewer(palette = "Paired") +
labs(x = "", y = "\n F.nurragi") +
theme(text = element_text(size=15, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.25),
axis.line = element_line(colour = 'black', size = 1.25),
axis.text.x = element_text(angle=45, hjust=1,
colour = "black", size = 13),
axis.text.y = element_text(angle=0, hjust=0.5,
colour = "black",size = 13),
axis.title.y = element_text(color="black", size=12,face="bold"),
legend.position = "none")
p3 <- ggplot(subset(meta, Group %in% c("CL.BO","CL.YO",
"CY.BU","CY.YO",
"SC.HE","SC.SH",
"SL.AN","SL.BE",
"SL.SH")),
aes(x = Group, y = F.nurragi,  colour = interaction(Group))) +
geom_point(alpha = 1, position = "jitter", size = 4) +
geom_boxplot(alpha = 0, colour = "black", size = 0.8)+
theme_classic() +   scale_color_brewer(palette = "Paired") +
labs(x = "", y = "\n F.nurragi") +
theme(text = element_text(size=15, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.25),
axis.line = element_line(colour = 'black', size = 1.25),
axis.text.x = element_text(angle=45, hjust=1,
colour = "black", size = 13),
axis.text.y = element_text(angle=0, hjust=0.5,
colour = "black",size = 13),
axis.title.y = element_text(color="black", size=12,face="bold"),
legend.position = "none")
p4 <- ggplot(subset(meta, Group %in% c("CL.BO","CL.YO",
"CY.BU","CY.YO",
"SC.HE","SC.SH",
"SL.AN","SL.BE",
"SL.SH")),
aes(x = Group, y = F.waltergamsii,  colour = interaction(Group))) +
geom_point(alpha = 1, position = "jitter", size = 4) +
geom_boxplot(alpha = 0, colour = "black", size = 0.8)+
theme_classic() +   scale_color_brewer(palette = "Paired") +
labs(x = "", y = "\n F.waltergamsii") +
theme(text = element_text(size=15, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.25),
axis.line = element_line(colour = 'black', size = 1.25),
axis.text.x = element_text(angle=45, hjust=1,
colour = "black", size = 13),
axis.text.y = element_text(angle=0, hjust=0.5,
colour = "black",size = 13),
axis.title.y = element_text(color="black", size=12,face="bold"),
legend.position = "none")
# Combine and Arrange the plots
fig <- ggarrange(p1, p2, p3, p4, labels = c("A", "B", "C", "D"), size = 8,
ncol = 2, nrow = 2)
# Add labels
fig <- annotate_figure(fig)
# Print the figure
print(fig)
##### Install required packages
# if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
# devtools::install_github("jbisanz/qiime2R") # current version is 0.99.20
library("qiime2R")
library("phyloseq")
library("dplyr")
library("tidyverse")
# Define the taxonomic levels
genus_levels <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
# Define the datasets and paths
dataset_info <- list(
list(  # GreenGenes 1
features = "[Qiime2]GreenGenes_13_8/428_228_220_table_gg-13-8-with-phyla-no-mitochondria-no-chloroplast.qza",
taxonomy = "[Qiime2]GreenGenes_13_8/428_228_220_taxonomy_gg-13-8.qza",
output_path = "[Qiime2]GreenGenes_13_8/level_counts_by_group_gg1.csv"
),
list(  # GreenGenes2
features = "[Qiime2]GreenGenes2_2022_10/428_228_220_table_gg_2022_10-with-phyla-no-mitochondria-no-chloroplast.qza",
taxonomy = "[Qiime2]GreenGenes2_2022_10/428_228_220_taxonomy_gg_2022_10.qza",
output_path = "[Qiime2]GreenGenes2_2022_10/level_counts_by_group_gg2.csv"
),
list(  # Silva138
features = "[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza",
taxonomy = "[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
output_path = "[Qiime2]Silva_138/level_counts_by_group_silva138.csv"
)
)
# Loop through each dataset
for (dataset in dataset_info) {
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = dataset$features,
taxonomy = dataset$taxonomy,
metadata = "meta-table.txt"
)
physeq.sum <- subset_samples(physeq, Analysis == "Include")
physeq.sum <- merge_samples(physeq.sum, "Type", fun = sum)
# Create an empty list to store genus-level abundance data for each taxonomic level
gentab_levels <- list()
# Set observation threshold
observationThreshold <- 1
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq.sum)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq.sum), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% reduce(full_join, by = "name")
# Set row names and column names
row.names(B2) <- B2$name
B2$name <- NULL
colnames(B2)[1:7] <- genus_levels
# Write the data frame to a file
write.csv(B2, file = dataset$output_path, row.names = TRUE)
# Clean up by removing unnecessary objects
rm(gentab_levels, observationThreshold, BB, B2)
}
setwd("~/GitHub/agmicrobiomebase/amplicon-sequence-analysis/amplicon-16S")
# Define the taxonomic levels
genus_levels <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
# Define the datasets and paths
dataset_info <- list(
list(  # GreenGenes 1
features = "[Qiime2]GreenGenes_13_8/428_228_220_table_gg-13-8-with-phyla-no-mitochondria-no-chloroplast.qza",
taxonomy = "[Qiime2]GreenGenes_13_8/428_228_220_taxonomy_gg-13-8.qza",
output_path = "[Qiime2]GreenGenes_13_8/level_counts_by_group_gg1.csv"
),
list(  # GreenGenes2
features = "[Qiime2]GreenGenes2_2022_10/428_228_220_table_gg_2022_10-with-phyla-no-mitochondria-no-chloroplast.qza",
taxonomy = "[Qiime2]GreenGenes2_2022_10/428_228_220_taxonomy_gg_2022_10.qza",
output_path = "[Qiime2]GreenGenes2_2022_10/level_counts_by_group_gg2.csv"
),
list(  # Silva138
features = "[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza",
taxonomy = "[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
output_path = "[Qiime2]Silva_138/level_counts_by_group_silva138.csv"
)
)
# Loop through each dataset
for (dataset in dataset_info) {
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = dataset$features,
taxonomy = dataset$taxonomy,
metadata = "meta-table.txt"
)
physeq.sum <- subset_samples(physeq, Analysis == "Include")
physeq.sum <- merge_samples(physeq.sum, "Type", fun = sum)
# Create an empty list to store genus-level abundance data for each taxonomic level
gentab_levels <- list()
# Set observation threshold
observationThreshold <- 1
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq.sum)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq.sum), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% reduce(full_join, by = "name")
# Set row names and column names
row.names(B2) <- B2$name
B2$name <- NULL
colnames(B2)[1:7] <- genus_levels
# Write the data frame to a file
write.csv(B2, file = dataset$output_path, row.names = TRUE)
# Clean up by removing unnecessary objects
rm(gentab_levels, observationThreshold, BB, B2)
}
# Loop through each dataset
for (dataset in dataset_info) {
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = dataset$features,
taxonomy = dataset$taxonomy,
metadata = "16s_meta-table.txt"
)
physeq.sum <- subset_samples(physeq, Analysis == "Include")
physeq.sum <- merge_samples(physeq.sum, "Type", fun = sum)
# Create an empty list to store genus-level abundance data for each taxonomic level
gentab_levels <- list()
# Set observation threshold
observationThreshold <- 1
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq.sum)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq.sum), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% reduce(full_join, by = "name")
# Set row names and column names
row.names(B2) <- B2$name
B2$name <- NULL
colnames(B2)[1:7] <- genus_levels
# Write the data frame to a file
write.csv(B2, file = dataset$output_path, row.names = TRUE)
# Clean up by removing unnecessary objects
rm(gentab_levels, observationThreshold, BB, B2)
}
## Data Visualization
# Load the reshape2 and ggplot2 libraries
library(reshape2)
library(ggplot2)
GreenGenes.v1 = read.csv("[Qiime2]GreenGenes_13_8/level_counts_by_group_gg1.csv")[5,]
GreenGenes.v2 = read.csv("[Qiime2]GreenGenes2_2022_10/level_counts_by_group_gg2.csv")[5,]
Sliva.v138 = read.csv("[Qiime2]Silva_138/level_counts_by_group_silva138.csv")[5,]
combined_df <- rbind(GreenGenes.v1, GreenGenes.v2, Sliva.v138)
combined_df$X <- c("GreenGenes.v1", "GreenGenes.v2", "Sliva.v138")
data_long <- melt(combined_df, id.vars = "X", variable.name = "Dataset", value.name = "Count")
colnames(data_long) = c("Ref.Database","Taxonomic.Level","Count")
# Convert Taxonomic.Level to a factor and specify the desired order of the levels
data_long$Taxonomic.Level <- factor(data_long$Taxonomic.Level,
levels = c("Kingdom", "Phylum", "Class", "Order",
"Family", "Genus", "Species"))
# Plot the data as a line graph using ggplot
# Open a new PDF graphics device
pdf(file = "line_graph.pdf", width=8,height=5)
# Close the PDF device and save the plot to a file
dev.off()
# Plot the data as a line graph using ggplot
# Open a new PDF graphics device
pdf(file = "line_graph.pdf", width=8,height=5)
ggplot(data_long, aes(x = Taxonomic.Level, y = Count, color = Ref.Database, group = Ref.Database)) +
geom_line(size = 2) +
geom_point(size = 4) +
scale_color_manual(values = c("Sliva.v138" = "cornflowerblue",
"GreenGenes.v2" = "greenyellow",
"GreenGenes.v1" = "forestgreen")) +
labs(x = "Taxonomic Level", y = "Count", color = "Reference\nDatabase") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold"),
legend.title = element_text(size = 13.5, face = "bold"),
legend.text = element_text(size = 12),
legend.key.size=unit(0.4,"cm")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
# Close the PDF device and save the plot to a file
dev.off()

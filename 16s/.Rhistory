library(qiime2R)
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "16s/GreenGenes_13_8/428_228_220_table_gg-13-8-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
# tree = "inst/artifacts/2020.2_moving-pictures/rooted-tree.qza",
taxonomy = "16s/GreenGenes_13_8/428_228_220_taxonomy_gg-13-8.qza",
metadata = "16s/meta-table_temp.txt"
)
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "/16s/GreenGenes_13_8/428_228_220_table_gg-13-8-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
# tree = "inst/artifacts/2020.2_moving-pictures/rooted-tree.qza",
taxonomy = "/16s/GreenGenes_13_8/428_228_220_taxonomy_gg-13-8.qza",
metadata = "/16s/meta-table_temp.txt"
)
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "./16s/GreenGenes_13_8/428_228_220_table_gg-13-8-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
# tree = "inst/artifacts/2020.2_moving-pictures/rooted-tree.qza",
taxonomy = "./16s/GreenGenes_13_8/428_228_220_taxonomy_gg-13-8.qza",
metadata = "./16s/meta-table_temp.txt"
)
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "16s\GreenGenes_13_8\428_228_220_table_gg-13-8-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
list.files()
setwd("~/GitHub/agmicrobiomebase")
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "./16s/GreenGenes_13_8/428_228_220_table_gg-13-8-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
# tree = "inst/artifacts/2020.2_moving-pictures/rooted-tree.qza",
taxonomy = "./16s/GreenGenes_13_8/428_228_220_taxonomy_gg-13-8.qza",
metadata = "./16s/meta-table_temp.txt"
)
## Subset the data
sample.remove <- c("SU.SC.SH.4", "SU.CY.YO.5",
"BE.SC.SH.5", "BE.SL.AN.3",
"OA.SL.SH.4","OA.SL.BE.2",
"OR.SL.SH.1", "OR.SL.SH.2",
"WH.SC.SH.4",
"BA.SL.BE.3.RE", "CO.CL.YO.5.RE", "OA.SL.AN.4.RE",
"CO.CY.YO.5.RE2", #
"p.ve.1", "p.ve.2","p.ve.3", "p.ve.4", "p.ve.5",
"n.ve.ext.1", "n.ve.ext.2", "n.ve.ITS.1",
"n.ve.1","n.ve.2","n.ve.3","n.ve.4", "n.ve.5")
physeq.a <- subset_samples(physeq,  !(id %in% sample.remove))
library("phyloseq")
## Subset the data
sample.remove <- c("SU.SC.SH.4", "SU.CY.YO.5",
"BE.SC.SH.5", "BE.SL.AN.3",
"OA.SL.SH.4","OA.SL.BE.2",
"OR.SL.SH.1", "OR.SL.SH.2",
"WH.SC.SH.4",
"BA.SL.BE.3.RE", "CO.CL.YO.5.RE", "OA.SL.AN.4.RE",
"CO.CY.YO.5.RE2", #
"p.ve.1", "p.ve.2","p.ve.3", "p.ve.4", "p.ve.5",
"n.ve.ext.1", "n.ve.ext.2", "n.ve.ITS.1",
"n.ve.1","n.ve.2","n.ve.3","n.ve.4", "n.ve.5")
physeq.a <- subset_samples(physeq,  !(id %in% sample.remove))
########################## in Crop types #########
AyBCode <- merge_samples(physeq.a, "Group", fun = sum)
physeq = AyBCode
gentab_levels <- list()
observationThreshold <- 1
for (level in c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")) {
genfac <- factor(tax_table(physeq)[, level])
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
level_counts <- apply(gentab > observationThreshold, 2, sum)
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# Add the result to the gentab_levels list
gentab_levels[[level]] <- BB
}
require(tidyverse);
B <- reduce(gentab_levels, full_join, by = "name");
# Write the data frame to a file
write.csv(B, file = "level_counts_by_group.csv", row.names = FALSE)
# Create a factor corresponding to the Species
genfac = factor(tax_table(physeq)[, "Species"])
# Tabulate the counts for each Species in each sample
gentab = apply(otu_table(physeq), MARGIN = 2, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# Download qiime2R from Github
# if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
# devtools::install_github("jbisanz/qiime2R")
library("qiime2R")
# Download phyloseq from CRAN
# if (!require("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("phyloseq")
library("phyloseq")
library("tidyverse")
# Convert qiime2 to phyloseq format
physeq.a <- qza_to_phyloseq(
features = "ITS/table-its-fungi-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
tree = "ITS/phylogeny-align-to-tree-mafft-fasttree/rooted_tree.qza",
taxonomy = "ITS/taxonomy-fungi.qza",
metadata = "ITS/meta-table.txt"
)
physeq.a ## confirm the object
# install.packages("ggplot2")
library("ggplot2")
# install.packages("plyr")
library("plyr")
physeq <- merge_samples(physeq.a, "Group", fun = sum)
gentab_levels <- list()
observationThreshold <- 1
# Define the taxonomic levels
genus_levels <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
# Something wrong with Kingdom Level, removed from the analysis
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% reduce(full_join, by = "name")
# Set row names and column names
row.names(B2) <- B2$name
B2$name <- NULL
colnames(B2)[1:6] <- genus_levels
physeq <- merge_samples(physeq.a, "Group", fun = sum)
gentab_levels <- list()
observationThreshold <- 1
# Define the taxonomic levels
genus_levels <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
# Something wrong with Kingdom Level, removed from the analysis
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% reduce(full_join, by = "name")
# Set row names and column names
row.names(B2) <- B2$name
B2$name <- NULL
colnames(B2)[1:6] <- genus_levels
print(B2)
library(reshape2)
data_long <- melt(B2, id.vars = "X", variable.name = "Dataset", value.name = "Count")
data_long <- melt(B2)
View(data_long)
View(B2)
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% reduce(full_join, by = "name")
View(B2)
# Set row names and column names
row.names(B2) <- B2$name
View(B2)
B2$name <- NULL
colnames(B2)[1:6] <- genus_levels
print(B2)
# write.csv(B2, file = "ITS/level_counts_by_group.csv", row.names = TRUE)
B2$name = row.names(B2)
data_long <- melt(B2)
View(data_long)
View(B2)
View(B2)
View(data_long)
ggplot(data_long, aes(x = name, y = value, color = name, group = name)) +
geom_line() +
geom_point(size = 4) +
scale_color_manual(values = c("sliva.138" = "red",
"GreenGenes.2" = "blue",
"GreenGenes.1" = "green")) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
# Load the reshape2 and ggplot2 libraries
library(reshape2)
library(ggplot2)
GreenGenes.1 = read.csv("[Qiime2]GreenGenes_13_8/level_counts_by_group.csv")[5,]
setwd("~/GitHub/agmicrobiomebase/16s")
# Load the reshape2 and ggplot2 libraries
library(reshape2)
library(ggplot2)
GreenGenes.1 = read.csv("[Qiime2]GreenGenes_13_8/level_counts_by_group.csv")[5,]
GreenGenes.1 = read.csv("[Qiime2]GreenGenes_13_8/level_counts_by_group.csv")[5,]
GreenGenes.1 = read.csv("[Qiime2]GreenGenes_13_8/level_counts_by_group.csv")[5,]
GreenGenes.2 = read.csv("[Qiime2]GreenGenes2_2022_10/level_counts_by_group_gg2.csv")[5,]
sliva.138 = read.csv("[Qiime2]Silva_138//level_counts_by_group.csv")[5,]
combined_df <- rbind(GreenGenes.1, GreenGenes.2, sliva.138)
combined_df$X <- c("GreenGenes.1", "GreenGenes.2", "sliva.138")
View(combined_df)
data_long2 <- melt(combined_df, id.vars = "X", variable.name = "Dataset", value.name = "Count")
View(data_long2)
View(B2)
View(data_long)
View(data_long2)
data_long <- melt(B2, id.vars = "name", variable.name = "Level", value.name = "Taxa")
ggplot(data_long, aes(x = name, y = Taxa, color = Level, group = Level)) +
geom_line() +
geom_point(size = 4) +
scale_color_manual(values = c("WH.CL.BO" = "red",
"WH.CL.YO" = "blue",
"WH.CY.BU" = "green")) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
View(data_long)
data_long <- melt(B2, id.vars = "name", variable.name = "Taxa", value.name = "Level")
ggplot(data_long, aes(x = name, y = Taxa, color = Level, group = Level)) +
geom_line() +
geom_point(size = 4) +
scale_color_manual(values = c("WH.CL.BO" = "red",
"WH.CL.YO" = "blue",
"WH.CY.BU" = "green")) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
ggplot(data_long, aes(x = name, y = Taxa, color = Level, group = Level)) +
geom_line() +
geom_point(size = 4) +
scale_color_manual(values = c("WH.CL.BO" = "red",
"WH.CL.YO" = "blue",
"WH.CY.BU" = "green")) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
ggplot(data_long, aes(x = name, y = Level, color = Taxa, group = Taxa)) +
geom_line() +
geom_point(size = 4) +
scale_color_manual(values = c("WH.CL.BO" = "red",
"WH.CL.YO" = "blue",
"WH.CY.BU" = "green")) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
data_long <- melt(B2, id.vars = "name", variable.name = "Level", value.name = "Taxa")
ggplot(data_long, aes(x = name, y = Level, color = Taxa, group = Taxa)) +
geom_line() +
geom_point(size = 4) +
scale_color_manual(values = c("WH.CL.BO" = "red",
"WH.CL.YO" = "blue",
"WH.CY.BU" = "green")) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
ggplot(data_long, aes(x = name, y = Taxa, color = name, group = name)) +
geom_line() +
geom_point(size = 4) +
scale_color_manual(values = c("WH.CL.BO" = "red",
"WH.CL.YO" = "blue",
"WH.CY.BU" = "green")) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
View(data_long)
ggplot(data_long, aes(x = Level, y = Taxa, color = name, group = name)) +
geom_line() +
geom_point(size = 4) +
scale_color_manual(values = c("WH.CL.BO" = "red",
"WH.CL.YO" = "blue",
"WH.CY.BU" = "green")) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
ggplot(data_long, aes(x = Level, y = Taxa, color = name, group = name)) +
geom_line() +
geom_point(size = 4) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
# Plot the data as a line graph using ggplot
# Open a new PDF graphics device
pdf(file = "line_graph_ITS.pdf", width=8,height=5)
ggplot(data_long, aes(x = Level, y = Taxa, color = name, group = name)) +
geom_line() +
geom_point(size = 4) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
ggplot(data_long, aes(x = Level, y = Taxa, color = name, group = name)) +
geom_line() +
geom_point(size = 4) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
# Close the PDF device and save the plot to a file
dev.off()
# Close the PDF device and save the plot to a file
dev.off()
pdf(file = "line_graph_ITS.pdf", width=8,height=5)
ggplot(data_long, aes(x = Level, y = Taxa, color = name, group = name)) +
geom_line() +
geom_point(size = 4) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))
# Close the PDF device and save the plot to a file
dev.off()
ggplot(data_long, aes(x = Level, y = Taxa, color = name, group = name)) +
geom_line() +
geom_point(size = 4) +
labs(x = "Taxonomic Level", y = "Count") +
theme_classic() +
theme(
text = element_text(size = 19, colour = "black"),
axis.ticks = element_line(colour = "black", size = 1.1),
axis.line = element_line(colour = 'black', size = 1.1),
axis.text.x = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.text.y = element_text(colour = "black", angle = 0, hjust = 0.5, size = 13, face = "bold"),
axis.title.y = element_text(color = "black", size = 14, face = "bold"),
axis.title.x = element_text(color = "black", size = 14, face = "bold")
) +
scale_x_discrete(guide = guide_axis(n.dodge=2)) +
scale_y_continuous(breaks=seq(0,1500,by=250))

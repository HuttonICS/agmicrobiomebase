row.names(B2) <- B2$name
B2$name <- NULL
colnames(B2)[1:7] <- genus_levels
# Define the taxonomic levels
genus_levels <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
colnames(B2)[1:6] <- genus_levels
View(B2)
B2$level_counts <- NULL
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% reduce(full_join, by = "name")
View(B2)
# Something wrong with Kingdom Level, removed from the analysis
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq.sum)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq.sum), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Something wrong with Kingdom Level, removed from the analysis
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Something wrong with Kingdom Level, removed from the analysis
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
es
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% reduce(full_join, by = "name")
# Set row names and column names
row.names(B2) <- B2$name
B2$name <- NULL
colnames(B2)[1:6] <- genus_levels
View(B2)
View(gentab_levels)
gentab_levels[["Kingdom"]]
genfac
View(genfac)
genfac
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, Kingdom])
physeq
tax_table(physeq)
head(tax_table(physeq))
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[,Kingdom])
observationThreshold <- 0.5
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[,Kingdom])
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[,Phylum])
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, Phylum])
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[Phylum])
head(tax_table(physeq))
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, Species])
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, "Kingdom"])
View(genfac)
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > 0, 2, sum)
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > 1, 2, sum)
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab => observationThreshold, 2, sum)
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab >= observationThreshold, 2, sum)
gentab
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, "Phylum"])
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, "Phylum"])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
View(gentab)
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, "Kingdom"])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
View(gentab)
# Something wrong with Kingdom Level, removed from the analysis
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, "Phylum"])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, "Phylum"])
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, "Phylum"])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
View(gentab)
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, "Kingdom"])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 0, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
View(BB)
gentab_levels <- list()
observationThreshold <- 1
# Define the taxonomic levels
genus_levels <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
rm(gentab_levels)
gentab_levels <- list()
observationThreshold <- 1
# Define the taxonomic levels
genus_levels <- c("Phylum", "Class", "Order", "Family", "Genus", "Species")
# Something wrong with Kingdom Level, removed from the analysis
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, "level"])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Set row names and column names
row.names(B2) <- B2$name
# Something wrong with Kingdom Level, removed from the analysis
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Something wrong with Kingdom Level, removed from the analysis
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% reduce(full_join, by = "name")
# Set row names and column names
row.names(B2) <- B2$name
B2$name <- NULL
colnames(B2)[1:6] <- genus_levels
# write.csv(B2, file = "ITS/level_counts_by_group.csv", row.names = TRU
write.csv(B2, file = "ITS/level_counts_by_group.csv", row.names = TRUE)
setwd("~/GitHub/agmicrobiomebase/16s")
setwd("~/GitHub/agmicrobiomebase/16s")
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "./[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
taxonomy = "[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
metadata = "meta-tablext"
#, tree = "rooted-tree.qza"
)
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
taxonomy = "[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
metadata = "meta-tablext"
#, tree = "rooted-tree.qza"
)
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
taxonomy = "[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
metadata = "meta-tablext"
#, tree = "rooted-tree.qza"
)
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "[Qiime2]Silva_138\428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
taxonomy = "[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
metadata = "meta-tablext"
#, tree = "rooted-tree.qza"
)
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
taxonomy = "[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
metadata = "meta-tablext"
#, tree = "rooted-tree.qza"
)
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "`[Qiime2]Silva_138`/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
taxonomy = "[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
metadata = "meta-tablext"
#, tree = "rooted-tree.qza"
)
setwd("~/GitHub/agmicrobiomebase/16s/[Qiime2]Silva_138")
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "~/GitHub/agmicrobiomebase/16s/[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
taxonomy = "[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
metadata = "meta-tablext"
#, tree = "rooted-tree.qza"
)
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "~/GitHub/agmicrobiomebase/16s/[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
taxonomy = "~/GitHub/agmicrobiomebase/16s/[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
metadata = "~/GitHub/agmicrobiomebase/16s/meta-tablext"
#, tree = "rooted-tree.qza"
)
# Download qiime2R from Github
# if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
# devtools::install_github("jbisanz/qiime2R")
library("qiime2R")
# Download phyloseq from Bioconductor
# if (!require("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
# BiocManager::install("phyloseq")
library("phyloseq")
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "~/GitHub/agmicrobiomebase/16s/[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
taxonomy = "~/GitHub/agmicrobiomebase/16s/[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
metadata = "~/GitHub/agmicrobiomebase/16s/meta-table.txt"
#, tree = "rooted-tree.qza"
)
physeq ## confirm the object
# sample_names(physeq)
# rank_names(physeq) # "Kingdom" "Phylum" "Class" "Order" "Family" "Genus" "Species"
## unwanted samples removel (including failed samples)
physeq.ori <- subset_samples(physeq, Analysis == "Include")
## remove object
rm(physeq)
# devtools::install_github("wdl2459/ConQuR")
library(ConQuR)
# Download phyloseq from CRAN
#   install.packages("doParallel")
library(doParallel)
dataset_info <- list(
list(  # Silva138
features = "[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza",
taxonomy = "[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
output_path = "[Qiime2]Silva_138/level_counts_by_group.csv"
)
)
# Loop through each dataset
for (dataset in dataset_info) {
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = dataset$features,
taxonomy = dataset$taxonomy,
metadata = "meta-table.txt"
)
ds
)
setwd("~/GitHub/agmicrobiomebase/16s")
rm physeq.ori
rm(physeq.ori)
# Loop through each dataset
for (dataset in dataset_info) {
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = dataset$features,
taxonomy = dataset$taxonomy,
metadata = "meta-table.txt"
)
physeq.sum <- subset_samples(physeq, Analysis == "Include")
physeq.sum <- merge_samples(physeq.sum, "Type", fun = sum)
# Create an empty list to store genus-level abundance data for each taxonomic level
gentab_levels <- list()
# Set observation threshold
observationThreshold <- 1
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq.sum)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq.sum), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% reduce(full_join, by = "name")
# Set row names and column names
row.names(B2) <- B2$name
B2$name <- NULL
colnames(B2)[1:7] <- genus_levels
# Write the data frame to a file
write.csv(B2, file = dataset$output_path, row.names = TRUE)
# Clean up by removing unnecessary objects
rm(gentab_levels, observationThreshold, BB, B2)
}
#################################################
# Define the taxonomic levels
genus_levels <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
# Loop through each dataset
for (dataset in dataset_info) {
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = dataset$features,
taxonomy = dataset$taxonomy,
metadata = "meta-table.txt"
)
physeq.sum <- subset_samples(physeq, Analysis == "Include")
physeq.sum <- merge_samples(physeq.sum, "Type", fun = sum)
# Create an empty list to store genus-level abundance data for each taxonomic level
gentab_levels <- list()
# Set observation threshold
observationThreshold <- 1
# loop through all the taxonomic levels
for (level in genus_levels) {
# create a factor variable for each level
genfac <- factor(tax_table(physeq.sum)[, level])
# calculate the abundance of each genus within each sample
gentab <- apply(otu_table(physeq.sum), MARGIN = 1, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
# calculate the number of samples in which each genus is observed above the threshold
level_counts <- apply(gentab > observationThreshold, 2, sum)
# create a data frame of level counts with genus names as row names
BB <- as.data.frame(level_counts)
BB$name <- row.names(BB)
# add the data frame to the gentab_levels list
gentab_levels[[level]] <- BB
}
# Combine all level counts data frames into one data frame
B2 <- gentab_levels %>% reduce(full_join, by = "name")
# Set row names and column names
row.names(B2) <- B2$name
B2$name <- NULL
colnames(B2)[1:7] <- genus_levels
# Write the data frame to a file
write.csv(B2, file = dataset$output_path, row.names = TRUE)
# Clean up by removing unnecessary objects
rm(gentab_levels, observationThreshold, BB, B2)
}
rm(dataset, dataset_info, gentab, physeq.sum, genfac, genus_levels, level)
rm(level_counts)
############################################## individal samples ######################
# Create a factor corresponding to the Species
genfac = factor(tax_table(physeq)[, "Species"])
# Tabulate the counts for each Species in each sample
gentab = apply(otu_table(physeq), MARGIN = 2, function(x) {
tapply(x, INDEX = genfac, FUN = sum, na.rm = TRUE, simplify = TRUE)
})
observationThreshold = 1
Species = apply(gentab > observationThreshold, 2, sum)
BB = as.data.frame(Species)
#######################
# Create a factor corresponding to the Genus
genfac = factor(tax_table(physeq)[, "Genus"])
# Calculate the sum of ASVs across samples and create a data frame
ASV <- sample_sums(physeq)
ASV <- as.data.frame(ASV)
View(ASV)
write.csv(ASV, "ASV.csv")
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "~/GitHub/agmicrobiomebase/16s/[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
taxonomy = "~/GitHub/agmicrobiomebase/16s/[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
metadata = "~/GitHub/agmicrobiomebase/16s/meta-table.txt"
#, tree = "rooted-tree.qza"
)
physeq ## confirm the object
# Calculate the sum of ASVs across samples and create a data frame
ASV <- sample_sums(physeq)
ASV <- as.data.frame(ASV)
write.csv(ASV, "ASV.csv")
write.csv(ASV, "ASV.csv")
physeq
View(Sample_Data(physeq))
View(sample_data(physeq))
write.csv(sample_data(physeq), "ABC.csv""
)
)
""
write.csv(sample_data(physeq), "ABC.csv")
B = as.data.frame(sample_data(physeq))
write.csv(B, "ABC.csv")
View(B)
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "~/GitHub/agmicrobiomebase/16s/[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
taxonomy = "~/GitHub/agmicrobiomebase/16s/[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
metadata = "~/GitHub/agmicrobiomebase/16s/meta-table.txt"
#, tree = "rooted-tree.qza"
)
# Convert qiime2 results to phyloseq format
physeq <- qza_to_phyloseq(
features = "~/GitHub/agmicrobiomebase/16s/[Qiime2]Silva_138/428_228_220_table_silva138-with-phyla-no-mitochondria-no-chloroplast.qza", # table.qza
taxonomy = "~/GitHub/agmicrobiomebase/16s/[Qiime2]Silva_138/428_228_220_taxonomy_silva138.qza",
metadata = "~/GitHub/agmicrobiomebase/16s/meta-table.txt"
#, tree = "rooted-tree.qza"
)
physeq ## confirm the object
# Calculate the sum of ASVs across samples and create a data frame
ASV <- sample_sums(physeq)
# Calculate the sum of ASVs across samples and create a data frame
ASV <- sample_sums(physeq)
ASV <- as.data.frame(ASV)
write.csv(ASV, "ABC.csv")
setwd("~/GitHub/agmicrobiomebase/16s")
setwd("~/GitHub/agmicrobiomebase/16s")
##### Install required packages
# if (!requireNamespace("devtools", quietly = TRUE)){install.packages("devtools")}
# devtools::install_github("jbisanz/qiime2R") # current version is 0.99.20
library("qiime2R")
library("phyloseq")
library("dplyr")
#################################################
# Define the taxonomic levels
genus_levels <- c("Kingdom", "Phylum", "Class", "Order", "Family", "Genus", "Species")
)
))
_
)
gc()
